rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Chat metadata
    match /chats/{chatId} {
      allow read: if request.auth != null;

      allow create: if request.auth != null &&
        request.resource.data.keys().hasAll(['user_id', 'admin_id', 'astrologer_id', 'last_message', 'last_updated']) &&
        request.resource.data.user_id is string &&
        request.resource.data.admin_id is string &&
        request.resource.data.astrologer_id is string &&
        request.resource.data.last_message is string &&
        request.resource.data.last_updated is timestamp;

      allow update: if request.auth != null &&
        request.writeFields.size() == 2 &&
        request.writeFields.hasAll(['last_message', 'last_updated']) &&
        request.resource.data.last_message is string &&
        request.resource.data.last_updated is timestamp;
    }

    // Messages
    match /chats/{chatId}/messages/{messageId} {
      allow read: if true;

      allow create: if request.auth != null &&
        request.resource.data.keys().hasOnly([
          'text', 'user_id', 'admin_id', 'astrologer_id',
          'user_type', 'user_name', 'timestamp'
        ]) &&
        request.resource.data.text is string &&
        request.resource.data.user_id is string &&
        request.resource.data.admin_id is string &&
        request.resource.data.astrologer_id is string &&
        request.resource.data.user_type is string &&
        request.resource.data.user_name is string;
        
      allow update, delete: if false;
    }

    // Astrologers
    match /astrologers/{astrologerId} {
      allow read, write: if request.auth != null;
    }
  }
}